// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/filter/filter.proto

package filter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b4cf5d85e32cb1, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Response struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result               *Result  `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b4cf5d85e32cb1, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type Result struct {
	OriginContent        string   `protobuf:"bytes,1,opt,name=origin_content,json=originContent,proto3" json:"origin_content,omitempty"`
	FilteredContent      string   `protobuf:"bytes,2,opt,name=filtered_content,json=filteredContent,proto3" json:"filtered_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b4cf5d85e32cb1, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetOriginContent() string {
	if m != nil {
		return m.OriginContent
	}
	return ""
}

func (m *Result) GetFilteredContent() string {
	if m != nil {
		return m.FilteredContent
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "filter.Request")
	proto.RegisterType((*Response)(nil), "filter.Response")
	proto.RegisterType((*Result)(nil), "filter.Result")
}

func init() { proto.RegisterFile("proto/filter/filter.proto", fileDescriptor_a0b4cf5d85e32cb1) }

var fileDescriptor_a0b4cf5d85e32cb1 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcd, 0x4e, 0xc3, 0x30,
	0x10, 0x84, 0x09, 0x3f, 0x69, 0x59, 0x94, 0xb6, 0xda, 0x53, 0xe0, 0x54, 0x05, 0x81, 0xca, 0xa5,
	0x95, 0x0a, 0x6f, 0x80, 0xc4, 0x03, 0x38, 0x07, 0x24, 0x2e, 0xfc, 0x24, 0x4b, 0x65, 0xa9, 0x78,
	0x83, 0xbd, 0xcd, 0xf3, 0x23, 0xd6, 0x0e, 0x3f, 0xb7, 0x9e, 0xec, 0xf9, 0x3c, 0x63, 0x8f, 0x17,
	0xce, 0x3b, 0xcf, 0xc2, 0xab, 0x77, 0xbb, 0x15, 0xf2, 0x69, 0x59, 0x2a, 0xc3, 0x3c, 0xaa, 0xea,
	0x12, 0x46, 0x86, 0x3e, 0x77, 0x14, 0x04, 0x4b, 0x18, 0x35, 0xec, 0x84, 0x9c, 0x94, 0xd9, 0x3c,
	0x5b, 0x9c, 0x9a, 0x41, 0x56, 0x2f, 0x30, 0x36, 0x14, 0x3a, 0x76, 0x81, 0x10, 0xe1, 0xb8, 0xe1,
	0x96, 0xd4, 0x72, 0x62, 0x74, 0xff, 0x9d, 0xfc, 0xa0, 0x10, 0x5e, 0x37, 0x54, 0x1e, 0xc6, 0x64,
	0x92, 0x78, 0x0d, 0xb9, 0xa7, 0xb0, 0xdb, 0x4a, 0x79, 0x34, 0xcf, 0x16, 0x67, 0xeb, 0xc9, 0x32,
	0xb5, 0x30, 0x4a, 0x4d, 0x3a, 0xad, 0x9e, 0x20, 0x8f, 0x04, 0xaf, 0x60, 0xc2, 0xde, 0x6e, 0xac,
	0x7b, 0xfe, 0x5f, 0xa6, 0x88, 0xf4, 0x3e, 0x42, 0xbc, 0x81, 0x59, 0xbc, 0x89, 0xda, 0x1f, 0x63,
	0x7c, 0x7b, 0x3a, 0xf0, 0x64, 0x5d, 0xf7, 0x50, 0x3c, 0x28, 0xaa, 0xc9, 0xf7, 0xb6, 0x21, 0x5c,
	0xc1, 0xb8, 0x16, 0xee, 0x1e, 0xd9, 0xb7, 0x38, 0xfd, 0x2d, 0xa4, 0x53, 0xb8, 0x98, 0xfd, 0x69,
	0xa8, 0x3f, 0xae, 0x0e, 0xf0, 0x0e, 0x8a, 0x9a, 0x5c, 0xb0, 0x62, 0x7b, 0xda, 0x3b, 0xf5, 0x96,
	0xeb, 0xa4, 0x6f, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xef, 0x71, 0x0e, 0x06, 0x86, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilterServiceClient is the client API for FilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilterServiceClient interface {
	StopWord(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SensitiveWord(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type filterServiceClient struct {
	cc *grpc.ClientConn
}

func NewFilterServiceClient(cc *grpc.ClientConn) FilterServiceClient {
	return &filterServiceClient{cc}
}

func (c *filterServiceClient) StopWord(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/filter.FilterService/StopWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) SensitiveWord(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/filter.FilterService/SensitiveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterServiceServer is the server API for FilterService service.
type FilterServiceServer interface {
	StopWord(context.Context, *Request) (*Response, error)
	SensitiveWord(context.Context, *Request) (*Response, error)
}

// UnimplementedFilterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFilterServiceServer struct {
}

func (*UnimplementedFilterServiceServer) StopWord(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWord not implemented")
}
func (*UnimplementedFilterServiceServer) SensitiveWord(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SensitiveWord not implemented")
}

func RegisterFilterServiceServer(s *grpc.Server, srv FilterServiceServer) {
	s.RegisterService(&_FilterService_serviceDesc, srv)
}

func _FilterService_StopWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).StopWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/StopWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).StopWord(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_SensitiveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).SensitiveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/SensitiveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).SensitiveWord(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filter.FilterService",
	HandlerType: (*FilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopWord",
			Handler:    _FilterService_StopWord_Handler,
		},
		{
			MethodName: "SensitiveWord",
			Handler:    _FilterService_SensitiveWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/filter/filter.proto",
}
